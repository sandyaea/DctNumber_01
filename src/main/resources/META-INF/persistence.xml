<persistence
        version="2.1"
        xmlns="http://xmlns.jcp.org/xml/ns/persistence"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence
                            http://xmlns.jcp.org/xml/ns/persistence_2_1.xsd">

    <!-- 
         The <code>persistence.xml</code> file configures at least one persistence unit;
         each unit must have a unique name.
    -->
    <persistence-unit name="HelloWorldPU">

        <!-- 
             Each persistence unit must have a database connection. Here you delegate to
             an existing <code>java.sql.DataSource</code>. Hibernate will find the data source
             by name with a JNDI lookup on startup.
        -->
        <jta-data-source>myDS</jta-data-source>

        <!-- 
            A persistent unit has persistent (mapped) classes, you list them here.
        -->
        <class>org.kate.dctnumber.model.Employee</class>
        <class>org.kate.dctnumber.model.Dct</class>

        <!-- 
            Hibernate can scan your classpath for mapped classes and add them automatically
            to your persistence unit. This setting disables that feature.
        -->
        <exclude-unlisted-classes>true</exclude-unlisted-classes>

        <!-- 
            Standard or vendor-specific options can be set as properties on a persistence unit.
            Any standard properties have the <code>javax.persistence</code> name prefix, Hibernate's
            settings use <code>hibernate</code>
        -->
        <properties>

            <!-- 
                The JPA engine should drop and re-create the SQL schema in the database
                automatically when it boots. This is ideal for automated testing, when
                you want to work with a clean database for every test run.
            -->
            <property
                name="javax.persistence.schema-generation.database.action"
                value="drop-and-create"/>

            <!-- 
			<property name="javax.persistence.schema-generation.create-source"
				value="script" />
			<property name="javax.persistence.schema-generation.create-script-source"
				value="META-INF/create-db.sql" />
			<property name="javax.persistence.schema-generation.drop-source"
				value="script" />
			<property name="javax.persistence.schema-generation.drop-script-source"
				value="META-INF/drop-db.sql" />
            -->

			<property name="javax.persistence.sql-load-script-source"
				value="META-INF/data.sql" />

            <!-- 
			<property name="javax.persistence.schema-generation.scripts.action"
				value="drop-and-create"/>
			<property name="javax.persistence.schema-generation.scripts.create-target"
				value="./sql/_create.sql"/>
			<property name="javax.persistence.schema-generation.scripts.drop-target"
				value="./sql/_drop.sql"/>
            -->

            <!-- 
                When printing SQL in logs, let Hibernate format the SQL nicely and generate
                comments into the SQL string so we know why Hibernate executed the SQL statement.
            -->
            <property name="hibernate.format_sql" value="true"/>
            <property name="hibernate.use_sql_comments" value="true"/>

            <!-- Disable Hibernate scanning completely, we also don't want any hbm.xml files
                 discovered and added automatically. -->
            <property name="hibernate.archive.autodetection" value="none"/>

        </properties>
    </persistence-unit>


</persistence>